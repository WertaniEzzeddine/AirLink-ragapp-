{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../chatbot.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ChatbotComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const msg_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", msg_r1.sender);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(msg_r1.message);\n  }\n}\nexport class ChatbotComponent {\n  constructor(chatbotService) {\n    this.chatbotService = chatbotService;\n    this.messages = [];\n    this.userMessage = '';\n  }\n  ngOnInit() {}\n  sendMessage() {\n    if (this.userMessage.trim()) {\n      this.messages.push({\n        sender: 'user',\n        message: this.userMessage\n      });\n      this.chatbotService.sendQuery(this.userMessage).subscribe(response => {\n        this.messages.push({\n          sender: 'bot',\n          message: response?.response || 'No response'\n        });\n        this.userMessage = ''; // Clear input field\n      }, error => {\n        console.error('Error:', error);\n        this.messages.push({\n          sender: 'bot',\n          message: 'Sorry, something went wrong.'\n        });\n      });\n    }\n  }\n  static {\n    this.ɵfac = function ChatbotComponent_Factory(t) {\n      return new (t || ChatbotComponent)(i0.ɵɵdirectiveInject(i1.ChatbotService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatbotComponent,\n      selectors: [[\"app-chatbot\"]],\n      decls: 7,\n      vars: 2,\n      consts: [[1, \"chat-container\"], [1, \"messages\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"input-area\"], [\"placeholder\", \"Type a message\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [3, \"ngClass\"]],\n      template: function ChatbotComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵtemplate(2, ChatbotComponent_div_2_Template, 3, 2, \"div\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 3)(4, \"input\", 4);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatbotComponent_Template_input_ngModelChange_4_listener($event) {\n            return ctx.userMessage = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function ChatbotComponent_Template_button_click_5_listener() {\n            return ctx.sendMessage();\n          });\n          i0.ɵɵtext(6, \"Send\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngModel\", ctx.userMessage);\n        }\n      },\n      dependencies: [i2.NgClass, i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n      styles: [\".chat-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  max-width: 400px;\\n  margin: 0 auto;\\n  border: 1px solid #ccc;\\n  padding: 10px;\\n}\\n\\n.messages[_ngcontent-%COMP%] {\\n  flex: 1;\\n  overflow-y: auto;\\n  margin-bottom: 10px;\\n}\\n\\ninput[_ngcontent-%COMP%] {\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n  padding: 10px 15px;\\n}\\n\\n.user[_ngcontent-%COMP%] {\\n  text-align: right;\\n}\\n\\n.bot[_ngcontent-%COMP%] {\\n  text-align: left;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhdGJvdC9jaGF0Ym90LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJDQUFBO0FBQ0E7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxnQkFBQTtFQUNBLGNBQUE7RUFDQSxzQkFBQTtFQUNBLGFBQUE7QUFDSjs7QUFFRTtFQUNFLE9BQUE7RUFDQSxnQkFBQTtFQUNBLG1CQUFBO0FBQ0o7O0FBRUU7RUFDRSxhQUFBO0VBQ0Esa0JBQUE7QUFDSjs7QUFFRTtFQUNFLGtCQUFBO0FBQ0o7O0FBRUU7RUFDRSxpQkFBQTtBQUNKOztBQUVFO0VBQ0UsZ0JBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qIHNyYy9hcHAvY2hhdGJvdC9jaGF0Ym90LmNvbXBvbmVudC5zY3NzICovXHJcbi5jaGF0LWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIG1heC13aWR0aDogNDAwcHg7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gIH1cclxuICBcclxuICAubWVzc2FnZXMge1xyXG4gICAgZmxleDogMTtcclxuICAgIG92ZXJmbG93LXk6IGF1dG87XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gIH1cclxuICBcclxuICBpbnB1dCB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG4gIH1cclxuICBcclxuICBidXR0b24ge1xyXG4gICAgcGFkZGluZzogMTBweCAxNXB4O1xyXG4gIH1cclxuICBcclxuICAudXNlciB7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICB9XHJcbiAgXHJcbiAgLmJvdCB7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;IAGMA,8BAAyD;IACpDA,YAAiB;IAAAA,iBAAI;;;;IADQA,uCAAsB;IACnDA,eAAiB;IAAjBA,oCAAiB;;;ACK5B,OAAM,MAAOC,gBAAgB;EAI3BC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAHlC,aAAQ,GAA0C,EAAE;IACpD,gBAAW,GAAW,EAAE;EAE6B;EAErDC,QAAQ,IAAU;EAElBC,WAAW;IACT,IAAI,IAAI,CAACC,WAAW,CAACC,IAAI,EAAE,EAAE;MAC3B,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE,MAAM;QAAEC,OAAO,EAAE,IAAI,CAACL;MAAW,CAAE,CAAC;MACjE,IAAI,CAACH,cAAc,CAACS,SAAS,CAAC,IAAI,CAACN,WAAW,CAAC,CAACO,SAAS,CACtDC,QAAQ,IAAI;QACX,IAAI,CAACN,QAAQ,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE,KAAK;UAAEC,OAAO,EAAEG,QAAQ,EAAEA,QAAQ,IAAI;QAAa,CAAE,CAAC;QACnF,IAAI,CAACR,WAAW,GAAG,EAAE,CAAC,CAAE;MAC1B,CAAC,EACAS,KAAK,IAAI;QACRC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9B,IAAI,CAACP,QAAQ,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE,KAAK;UAAEC,OAAO,EAAE;QAA8B,CAAE,CAAC;MAChF,CAAC,CACF;;EAEL;;;uBAtBWV,gBAAgB;IAAA;EAAA;;;YAAhBA,gBAAgB;MAAAgB;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UDR7BrB,8BAA4B;UAEtBA,iEAEM;UACRA,iBAAM;UAENA,8BAAwB;UACfA;YAAA;UAAA,EAAyB;UAAhCA,iBAAgE;UAChEA,iCAAgC;UAAxBA;YAAA,OAASsB,iBAAa;UAAA,EAAC;UAACtB,oBAAI;UAAAA,iBAAS;;;UAPxBA,eAAW;UAAXA,sCAAW;UAMzBA,eAAyB;UAAzBA,yCAAyB","names":["i0","ChatbotComponent","constructor","chatbotService","ngOnInit","sendMessage","userMessage","trim","messages","push","sender","message","sendQuery","subscribe","response","error","console","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\sarra\\Documents\\AEROPORT\\chatbot-app\\src\\app\\chatbot\\chatbot.component.html","C:\\Users\\sarra\\Documents\\AEROPORT\\chatbot-app\\src\\app\\chatbot\\chatbot.component.ts"],"sourcesContent":["<!-- src/app/chatbot/chatbot.component.html -->\n<div class=\"chat-container\">\n    <div class=\"messages\">\n      <div *ngFor=\"let msg of messages\" [ngClass]=\"msg.sender\">\n        <p>{{ msg.message }}</p>\n      </div>\n    </div>\n  \n    <div class=\"input-area\">\n      <input [(ngModel)]=\"userMessage\" placeholder=\"Type a message\" />\n      <button (click)=\"sendMessage()\">Send</button>\n    </div>\n  </div>\n  ","// src/app/chatbot/chatbot.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { ChatbotService } from '../chatbot.service';\n\n@Component({\n  selector: 'app-chatbot',\n  templateUrl: './chatbot.component.html',\n  styleUrls: ['./chatbot.component.scss']\n})\nexport class ChatbotComponent implements OnInit {\n  messages: { sender: string, message: string }[] = [];\n  userMessage: string = '';\n\n  constructor(private chatbotService: ChatbotService) {}\n\n  ngOnInit(): void {}\n\n  sendMessage(): void {\n    if (this.userMessage.trim()) {\n      this.messages.push({ sender: 'user', message: this.userMessage });\n      this.chatbotService.sendQuery(this.userMessage).subscribe(\n        (response) => {\n          this.messages.push({ sender: 'bot', message: response?.response || 'No response' });\n          this.userMessage = '';  // Clear input field\n        },\n        (error) => {\n          console.error('Error:', error);\n          this.messages.push({ sender: 'bot', message: 'Sorry, something went wrong.' });\n        }\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}